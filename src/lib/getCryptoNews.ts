// ============================================
// üì∞ Th∆∞ vi·ªán l·∫•y d·ªØ li·ªáu tin t·ª©c crypto
// ============================================
// S·ª≠ d·ª•ng CryptoPanic API ƒë·ªÉ l·∫•y tin t·ª©c crypto th·ªùi gian th·ª±c
// H√†m n√†y ƒë∆∞·ª£c d√πng chung cho API route v√† Server Component

type NewsItem = {
  id: string;
  title: string;
  url?: string;
  source?: string;
  published_at?: string;
  summary?: string;
};

// ============================================
// In-memory cache ƒë·ªÉ tr√°nh rate limit
// ============================================
let cachedNews: NewsItem[] | null = null;
let cacheTimestamp: number = 0;
const CACHE_DURATION = 10 * 60 * 1000; // 10 ph√∫t (trong milliseconds)

/**
 * L·∫•y tin t·ª©c crypto t·ª´ CryptoPanic API
 * @param limit - S·ªë l∆∞·ª£ng tin t·ª©c mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh: 20)
 * @returns M·∫£ng c√°c b√†i tin t·ª©c crypto
 */
export async function getCryptoNews(limit: number = 20): Promise<NewsItem[]> {
  // Ki·ªÉm tra cache tr∆∞·ªõc
  const now = Date.now();
  if (cachedNews && (now - cacheTimestamp) < CACHE_DURATION) {
    console.log('‚úÖ [CryptoPanic] S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ cache (c√≤n', Math.round((CACHE_DURATION - (now - cacheTimestamp)) / 1000), 'gi√¢y)');
    return cachedNews.slice(0, limit);
  }
  try {
    // L·∫•y API key t·ª´ env (optional - free tier kh√¥ng c·∫ßn)
    const authToken = process.env.CRYPTOPANIC_API_KEY || '';
    
    // Build URL v·ªõi ho·∫∑c kh√¥ng c√≥ auth_token
    const baseUrl = 'https://cryptopanic.com/api/v1/posts/';
    const params = new URLSearchParams({
      public: 'true',
      ...(authToken && { auth_token: authToken }),
    });
    
    const url = `${baseUrl}?${params.toString()}`;
    
    console.log('üîç [CryptoPanic] ƒêang l·∫•y tin t·ª©c crypto...');
    
    const response = await fetch(url, {
      next: { revalidate: 300 }, // Cache 5 ph√∫t
    });

    if (!response.ok) {
      console.error('‚ùå [CryptoPanic] L·ªói API:', response.status, response.statusText);
      throw new Error(`CryptoPanic API error: ${response.status}`);
    }

    const data = await response.json();
    
    // Transform CryptoPanic data sang format ƒë∆°n gi·∫£n
    const news: NewsItem[] = (data.results || []).map((item: any) => ({
      id: item.id?.toString() || Math.random().toString(),
      title: item.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ',
      url: item.url || '#',
      source: item.source?.title || 'CryptoPanic',
      published_at: item.published_at || item.created_at || new Date().toISOString(),
      summary: item.metadata?.description || '',
    }));

    // L∆∞u v√†o cache
    cachedNews = news;
    cacheTimestamp = Date.now();

    console.log(`‚úÖ [CryptoPanic] ƒê√£ l·∫•y ${news.length} tin t·ª©c v√† l∆∞u v√†o cache`);
    
    return news.slice(0, limit);
  } catch (error) {
    console.error('‚ùå [CryptoPanic] L·ªói khi l·∫•y tin t·ª©c:', error);
    
    // N·∫øu c√≥ cache c≈©, tr·∫£ v·ªÅ cache ƒë√≥ (k·ªÉ c·∫£ ƒë√£ h·∫øt h·∫°n)
    if (cachedNews && cachedNews.length > 0) {
      console.log('‚ö†Ô∏è [CryptoPanic] API l·ªói, s·ª≠ d·ª•ng cache c≈© (', cachedNews.length, 'tin)');
      return cachedNews.slice(0, limit);
    }
    
    // Fallback cu·ªëi c√πng: Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ cache
    console.log('‚ö†Ô∏è [CryptoPanic] Kh√¥ng c√≥ cache, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u');
    return [
      {
        id: '1',
        title: '‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i tin t·ª©c t·ª´ CryptoPanic',
        url: 'https://cryptopanic.com',
        source: 'Th√¥ng b√°o l·ªói',
        published_at: new Date().toISOString(),
        summary: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API (Rate Limit 429). CryptoPanic free tier: 1000 requests/day. Vui l√≤ng ƒë·ª£i m·ªôt l√∫c ho·∫∑c n√¢ng c·∫•p l√™n Pro tier ƒë·ªÉ c√≥ 10,000 requests/day.'
      },
      {
        id: '2',
        title: 'üí° Gi·∫£i ph√°p: Th√™m API key ƒë·ªÉ tƒÉng rate limit',
        url: 'https://cryptopanic.com/developers/api/',
        source: 'H∆∞·ªõng d·∫´n',
        published_at: new Date().toISOString(),
        summary: 'ƒêƒÉng k√Ω t√†i kho·∫£n Pro t·∫°i CryptoPanic ƒë·ªÉ nh·∫≠n auth_token, sau ƒë√≥ th√™m v√†o file .env.local: CRYPTOPANIC_API_KEY=your-token-here'
      }
    ];
  }
}


